var infoText = {
  "index": "<h1>Titanic Passenger Visualization</h1><p>This is a D3 scatterplot showing information about sampled passengers aboard the titanic.</p><h1>Tutorial</h1><p>We provide a step-by-step walkthrough of how to produce this visualization here. The info tab describes useful information for each step. For more information, see <a href='https://docs.google.com/presentation/d/1Cq1II5IqkNy9n47LhKuWmWWHNqk2ryIqpCVdPzDSFrE/edit?usp=sharing'>these slides</a>.</p>",
  "1-begin": "<h1>index.html</h1><p>We can start by defining a simple web page, which has a header (<span>h1</span>) and an <span>svg</span> element that will hold our visualization. In the style tags, we can add CSS styling for both elements defined in the HTML.</p>",
  "2-svg": "<h1>Manually Adding Elements</h1><p>We can manually add elements to the DOM, and specify properties such as the <span>x</span> and <span>y</span> position, and the <span>title</span> (which appears as a tooltip on hover). Elements can be added directly to the svg element, or to svg groups. They will inherit the properties of their parent group (like location and orientation). Keep in mind that the origin for positioning elements is the upper left corner.</p>",
  "3-selection": "<h1>Selecting an Element</h1><p><span>d3.select()</span> and <span>d3.selectAll()</span> can be used to select DOM elements by name, class, id, or many other css selectors. <span>d3.select()</span> selects only the first element that matches the css selectors while <span>d3.selectAll()</span> selects all matched elements.</p><p>Both methods return a <span class='bold'>D3 selection</span>. We can use, access, and modify the properties of the selected elements using methods such as <span>.attr()</span>, <span>.text()</span>, <span>.style()</span>. Most D3 selection methods return the selection, allowing us to chain the operator calls.</p><p>Through <span>append()</span>, we can add new elements anywhere in the DOM. We can then use operators or CSS to set the properties of the element. We can also get rid of elements with <span>remove()</span>. Finally, we can store selections in variables for future use.</p><p>In this case, we <span>select</span> our <span>svg</span> element to update the width and height, and we programmatically <span>append</span> circles to the visualization from our data.</p>",
  "4-binding": "<h1>Data Binding</h1><p>We can use the <span>data()</span> function to bind data to a selection or access the data that belongs to a selection.</p><h1>Enter/Update Pipeline</h1><p>In this case, we now have an enter/update pipeline.</p><p>(1) We start by <span>selectAll</span> circles on which to bind our data. We call this selection <span>scatter</span>.</p><p>(2) Then, we select the <span class='bold'>enter</span> set and <span>append</span> new circles as needed. For each of these new circles, we also <span>append</span> our title.</p><p>(3) Next, we use <span>enter.merge(scatter)</span> to merge* our <span class='bold'>enter</span> elements into our <span class='bold'>update</span> elements, and perform additional updates.</p><p class='footnote'>* Note: <span>merge</span> is new to D3v4.</p>",
  "5-scales1": "<h1>Specifying Scales</h1><p>Scales are functions that map from a domain to a range (for instance, from the data domain to the domain of the chart). For more information on D3 scales, check out <a href='https://medium.com/@mbostock/introducing-d3-scale-61980c51545f'>this blog post</a>.</p><p>Anonymous functions can be used to parameterize the element's attributes using the element's data. Anonymous functions can have two parameters <span>d</span> (our bound datum) and <span>i</span> (the index of our datum). An example anonymous function is used for the <span>cx</span> attribute of the circles.</p>",
  "6-scales2": "<h1>More Scale Types</h1><p><span>d3.scaleLinear</span> create a linear mapping. You can also have <span>d3.scaleLog</span>, <span>d3.scaleSqrt</span>, and so on. You can also specify ordinal (which include nominal data types) and temporal scales. Note that the <span>range()</span> does not have to be a set of numbers; it can also be colors or strings (for example, the <span>c</span> and <span>s</span> scales).</p><p class='footnote'>Note: <span>d3.scaleLinear</span> is new to D3v4 and replaces <span>d3.scale.linear</span>. This is true for all of these camelCase method names.</p>",
  "7-axes": "<h1>Axes</h1><p>Axes can be generated based on the scales in your visualization. Axes are defined based on their position using <span>d3.axisTop</span>, <span>d3.axisBottom</span>, <span>d3.axisRight</span>, or <span>d3.axisLeft</span>. Note: each of these constructors is a function; to create our axis, we create or select the element where we want to place it, and then use <span>call()</span> to apply the function to it. For more information on <span>call()</span>, see <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call'>this page</a>.</p>",
  "8-legends": "<h1>Legends</h1><p>Legends can be constructed just like the other elements of your visualization: by creating a new set of marks and using scales to style the attributes. In addition to the <span>rect</span> for the legend mark, we can append <span>text</span> to create the legend labels.</p>",
  "9-events": "<h1>Reacting to Events</h1><p>Event listeners can be added to marks to react to events on the underlying selection using the <span>on()</span> method. The <span>on()</span> method takes the event name and a callback function that is triggered every time the specified event happens.    An anonymous function can be used as the callback for the event listener. The input to the function <span>d</span> represents the underlying data of the mark. The scope, <span>this</span>, corresponds to the DOM element.</p><p>For example, here we add two event listeners for <span>mouseover</span> and <span>mouseout</span> to the circles in the enter set.</p>",
  "10-transitions": "<h1>Using Transitions</h1><p>Transitions can be used on the properties by including <span>.transition()</span>. Any property updates that occur after this call are applied as a transition. <span>duration</span> defines how long the transition should take and <span>delay</span> introduces a lag in when the updates occur from when they are triggered. The transitions use the previous properties of the element as the starting point and update to the desired values.</p><p>For example, here we add <span>.transition()</span> to the merged selection to update the circle properties.</p>",
  "11-csv": "<h1>Loading Data</h1><p>Data can be loaded from many types of external files using commands such as <span>d3.csv</span>, <span>d3.json</span>, <span>d3.tsv</span>. The D3 functions additionally support callback functions for dealing with the resulting data or error cases.</p>",
  "12-exit": "<h1>Removing Data</h1><p>In this step, we allow the viewer to sample a new passenger and upate the visualization to remove the oldest passenger and replace it with a new one. Is the behavior now what you would expect to see?</p><p><span class='emph'>Highlight all the text or triple click below to see the answer.</span></p><p class='hidden'>No data is being removed! We always have 10 circles on the screen, so the new data point is bound to one of our existing circles. See how we fix this on the next step.</p>",
  "13-final": "<h1>Removing Data - CORRECTED</h1><p>To remove data correctly, we use a function named <span>key</span> to provide each data point with a unique key value that is used to bind data to elements. Now, when data is added/removed, the DOM elements for the circle is added and removed appropriately.</p><p><span class='emph'>See the previous step for an example of an incorrect data binding.</span></p><h1>Tutorial Feedback</h1><p>If you have feedback on this tutorial, please fill out <a href='https://goo.gl/forms/uWscOzp9XjCyR5IT2'>this survey</a>. Thank you!</p>"
};